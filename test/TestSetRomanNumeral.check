#include "../src/SetRomanNumeral.h"

#test setsIWhenGivenI
  struct RomanNumeral romanNumeral;

  bool isValidRomanNumeral = SetRomanNumeral(&romanNumeral, "I");

  ck_assert_str_eq(romanNumeral.ones, "I");
  ck_assert_str_eq(romanNumeral.tens, "");
  ck_assert_str_eq(romanNumeral.hundreds, "");
  ck_assert_str_eq(romanNumeral.thousands, "");
  ck_assert(isValidRomanNumeral == true);

#test setsIIWhenGivenII
  struct RomanNumeral romanNumeral;

  bool isValidRomanNumeral = SetRomanNumeral(&romanNumeral, "II");

  ck_assert_str_eq(romanNumeral.ones, "II");
  ck_assert_str_eq(romanNumeral.tens, "");
  ck_assert_str_eq(romanNumeral.hundreds, "");
  ck_assert_str_eq(romanNumeral.thousands, "");
  ck_assert(isValidRomanNumeral == true);

#test returnsFalseWhenGiven3C
  struct RomanNumeral romanNumeral;

  bool isValidRomanNumeral = SetRomanNumeral(&romanNumeral, "3C");

  ck_assert_str_eq(romanNumeral.ones, "");
  ck_assert_str_eq(romanNumeral.tens, "");
  ck_assert_str_eq(romanNumeral.hundreds, "");
  ck_assert_str_eq(romanNumeral.thousands, "");
  ck_assert(isValidRomanNumeral == false);

  #test setsIIIWhenGivenIII
    struct RomanNumeral romanNumeral;

    bool isValidRomanNumeral = SetRomanNumeral(&romanNumeral, "III");

    ck_assert_str_eq(romanNumeral.ones, "III");
    ck_assert_str_eq(romanNumeral.tens, "");
    ck_assert_str_eq(romanNumeral.hundreds, "");
    ck_assert_str_eq(romanNumeral.thousands, "");
    ck_assert(isValidRomanNumeral == true);
