#include "../src/ArabicToRoman.h"

#test givenIReturns1
  struct RomanNumeral romanNumeral;

  bool isValidRomanNumeral = ArabicToRoman(&romanNumeral, 1);

  ck_assert_str_eq(romanNumeral.ones, "I");
  ck_assert_str_eq(romanNumeral.tens, "");
  ck_assert_str_eq(romanNumeral.hundreds, "");
  ck_assert_str_eq(romanNumeral.thousands, "");
  ck_assert(isValidRomanNumeral == true);

#test givenMCCXIIReturns1212
  struct RomanNumeral romanNumeral;

  bool isValidRomanNumeral = ArabicToRoman(&romanNumeral, 1212);

  ck_assert_str_eq(romanNumeral.ones, "II");
  ck_assert_str_eq(romanNumeral.tens, "X");
  ck_assert_str_eq(romanNumeral.hundreds, "CC");
  ck_assert_str_eq(romanNumeral.thousands, "M");
  ck_assert(isValidRomanNumeral == true);

#test givenMMCCCXXIIIReturns2323
  struct RomanNumeral romanNumeral;

  bool isValidRomanNumeral = ArabicToRoman(&romanNumeral, 2323);

  ck_assert_str_eq(romanNumeral.ones, "III");
  ck_assert_str_eq(romanNumeral.tens, "XX");
  ck_assert_str_eq(romanNumeral.hundreds, "CCC");
  ck_assert_str_eq(romanNumeral.thousands, "MM");
  ck_assert(isValidRomanNumeral == true);

#test givenMMMCDXLIVReturns3444
  struct RomanNumeral romanNumeral;

  bool isValidRomanNumeral = ArabicToRoman(&romanNumeral, 3444);

  ck_assert_str_eq(romanNumeral.ones, "IV");
  ck_assert_str_eq(romanNumeral.tens, "XL");
  ck_assert_str_eq(romanNumeral.hundreds, "CD");
  ck_assert_str_eq(romanNumeral.thousands, "MMM");
  ck_assert(isValidRomanNumeral == true);

#test givenMMMMReturnsAsInvalid
  struct RomanNumeral romanNumeral;

  bool isValidRomanNumeral = ArabicToRoman(&romanNumeral, 4000);

  ck_assert(isValidRomanNumeral == false);
